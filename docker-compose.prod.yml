services:
  django_app:
    build: .
    container_name: django_prod_smartyduqs
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - 8000
    env_file:
      - .env.prod 
    depends_on:
      db_postgres:
        condition: service_healthy
      db_mysql:
        condition: service_healthy

  nginx:
    image: nginx:1.19-alpine
    container_name: nginx_prod_smartyduqs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - django_app

  # Serviço do Banco de Dados PostgreSQL
  db_postgres:
    image: postgres:15-alpine
    container_name: postgres_prod_smartyduqs
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod 
    environment:
      # As variáveis são lidas do env_file acima
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço do Banco de Dados MySQL
  db_mysql:
    image: mysql:8.0
    container_name: mysql_prod_smartyduqs
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_data:/var/lib/mysql
    env_file:
      - .env.prod
    environment:
      # As variáveis são lidas do env_file acima
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  static_volume:
  media_volume:
  postgres_data:
  mysql_data:
  certbot_conf:
  certbot_www:
