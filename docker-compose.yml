services:
  django_app:
    build: .
    container_name: django_smartyduqs
    # O comando será executado pelo entrypoint.sh
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - .:/app  # Monta o código local no container (ótimo para dev)
    ports:
      - "8000:8000"
    env_file:
      - .env    # Carrega variáveis do arquivo .env
    depends_on:
      db_postgres:
        condition: service_healthy
      db_mysql:
        condition: service_healthy

  db_postgres:
    image: postgres:15-alpine # Imagem menor
    container_name: postgres_smartyduqs
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      # Você só precisa de 1 DB Postgres (smart_yduqs_presenca)
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  db_mysql:
    image: mysql:8.0
    container_name: mysql_smartyduqs
    command: --default-authentication-plugin=mysql_native_password # Compatibilidade
    volumes:
      - mysql_data:/var/lib/mysql
      # Você pode usar um script .sql para criar o DB e usuário se preferir
      # - ./init-db/init-mysql.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "3306:3306"

volumes:
  postgres_data:
  mysql_data:
